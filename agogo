#!/usr/bin/env bash

#   
#    ###     ###     ###     ###     ###   
#   ## ##   #   #   #   #   #   #   #   #  
#   #   #   #       #   #   #       #   #
#   #####   #  ##   #   #   #  ##   #   #  
#   #   #   #   #   #   #   #   #   #   #  
#   #   #    ## #    ###     ## #    ###   
#   

# ----------------------------------------------------------

# Agogo by Michael Cromer

# Usage:

#   agogo
#     main agogo function

#   agogo-status
#     show the current workspace and the current task (if any)

#   agogo-list
#     lists all the workspaces, indicating the current one, and its tasks

#   agogo-clockon
#     activate the specified workspace

#   agogo-clockoff
#     deactivate all workspaces

#   agogo-create
#     create a new workspace

#   agogo-destroy
#     remove a workspace (not reversible!)

#   agogo-add
#     add a task to the current workspace

#   agogo-remove
#     remove a task from the current workspace

#   agogo-choose
#     randomly select a task from the current workspace, weighted by time since working on

# ----------------------------------------------------------

# These will catch errors and exit safely
set -o errexit
set -o pipefail
set -o nounset

# A random integer modulo $1
agogo-random() {
  echo $(($RANDOM % $1))
}

# Parse a string in the format XXhYYm or HH:MM as ZZ(min)
agogo-parse-time() {
  local in=$(echo $1 | tr 'h' ':' | tr -d 'm')

  if [[ ! "$in" =~ ":" ]]; then
    local in="0:$in"
  fi

  local h=$(echo $in | sed 's/:.*//')
  local m=$(echo $in | sed 's/.*://')

  if [[ ! "$h" =~ [0-9]+ ]] || [[ ! "$m" =~ [0-9]+ ]]; then
    agogo-error "$1 is not in format HH:MM or XXhYYm"
  fi

  echo $((60*$h + $m))
}

# The path for the agogo dotfolder
agogo-filepath() {
  echo "$HOME/.agogo"
}

# Check whether there is a clockon session
agogo-current-exists() {
  [[ (-e $(agogo-filepath)/current) ]];
}

# Check whether a given workspace exists
agogo-workspace-exists() {
  [[ (-e $(agogo-filepath)/workspaces/$1) ]];
}

# Check whether a given task exists within the current workspace
agogo-task-exists() {
  local ws=$1
  local pj=$2
  if agogo-current-exists; then
    if [[ (-e "$(agogo-filepath)/workspaces/$ws/$pj") ]]; then
      return 0
    else
      return 1
    fi
  fi
  return 1
}

# Return the current workspace (blank if none)
agogo-current-workspace() {
  if agogo-current-exists; then
    awk '/WORKSPACE/ { print $2 }' "$(agogo-filepath)/current"
  fi
}

# Return the currently selected task (blank if none)
agogo-current-task() {
  if agogo-current-exists; then
    awk '/TASK/ { print $2 }' "$(agogo-filepath)/current"
  fi
}

# Errors if there is no current agogo clockon session
agogo-verify-current() {
  if !(agogo-current-exists) then
    agogo-error "Cannot perform action; not currently clocked on!"
  fi
}

# Errors if $1 is not a workspace
agogo-verify-workspace() {
  local ws=$1
  if !(agogo-workspace-exists $ws); then
    agogo-error "Workspace $ws does not exist!"
  fi
}

# Errors if $2 is not a task on workspace $1
agogo-verify-task() {
  local ws=$1
  local pj=$2
  if !(agogo-task-exists $ws $pj); then
    agogo-error "Task '$pj' does not exist on workspace $ws!"
  fi
}

# A custom read with default 'no' response. Argument $1 gives detail to the user
agogo-confirm-prompt() {
  agogo-print "${1}"
  agogo-print ""
  read -p "Are you sure? [y/N] " -n 1 -r
  [[ "${REPLY}" =~ ^[Yy]$ ]];
}

# For printing and piping errors correctly
agogo-error() {
  printf "\nagogo-error: ${*}\n\n" 1>&2
  exit 1
}

# For printing to the user 
agogo-print() {
  printf "\n${*}"
}

# Check if the user has requested any help
agogo-help-requested() {
  [[ ($# -eq 0) || ( "${1-}" =~ ^-*h(elp)?$ ) ]];
}

# Check if the user has requested info
agogo-info-requested() {
  [[ ( "${1-}" =~ ^-*i(nfo)?$ ) ]];
}

agogo-help() {
  echo """
################################################################################
--------------------------------------------------------------------------------
Usage: 
  
  agogo [--version] [--help] [--info] <command> <args>

--------------------------------------------------------------------------------
Synopsis:

  Help partition time between tasks in a way that is fair to all of them.

--------------------------------------------------------------------------------
Available commands:

  basic flags
    -h, --help      Show this help and exit
    -v, --version   Show the version number
    --info          Explain 'agogo'

  management and information
    list            List all workspaces, and all tasks of active workspace
    status          Display active workspace and current task

  operate on workspaces
    create          Create a new workspace
    clockon         Activate the selected workspace
    clockoff        Deactivate the currently active workspace
    destroy         Destroy a workspace (irreversible!)

  operate on tasks
    add             Add a task to the active workspace
    log             Log time (in minutes) to a specified task
    choose          Select a new active task at random, preferring stale tasks
    rm, remove      Remove a task from the active workspace (irreversible!)

--------------------------------------------------------------------------------
################################################################################
"""
}

agogo-info() {
  echo """
################################################################################
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
--------------------------------------------------------------------------------
ἀγωγός - agōgós - /a.ɡɔː.ɡós/
    adjective, m or f; second declension (Attic Greek)
    1. leading, guiding
    2. (masc. substantive) guide, escort
    3. (with πρός or ἐπί) leading to
    4. drawing, attracting
    5. eliciting, evoking
--------------------------------------------------------------------------------
agogô
    noun, m (Portuguese < Yoruba)
    1. percussion instrument consisting of two or three small conical bells
--------------------------------------------------------------------------------
à gogo 
    adverb (French)
    1. in abundance, galore
--------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
--------------------------------------------------------------------------------
A *pedagogue* is a teacher, especially a strict or pedantic one. It derives in
part from the Attic ἀγωγός, with the sense of "leading" or "guiding".

Do you sometimes reflect upon your time in high school and consider that,
despite any *other* evils of that place, the timetable system was highly
effective at getting information into your head? If only you could recapture
that structure for yourself - rigid blocks of time, with clear topics, scattered
almost uniformly at random through your week.

Even if you have the discipline to commit to one particular topic at a time, do
you have the arbitrary disregard for human feelings of an automated timetabling
system? (Don't answer that). How do you sprinkle your workdays evenly with all
the things you need to do? How can you fairly choose what to do next?

Agogo is here to help. Create a workspace and add tasks to it. When you are
clocked on to a workspace, you can ask agogo to choose a task. You will then be
presented with a randomly task. Agogo prefers to select tasks that you have not
worked on for a while. Record the time spent (in minutes) on any of the tasks in
the workspace to ensure that agogo knows the current state of play.

Hopefully your guilt and feeling of hopelessness over your abundance of tasks
galore will soon abate.

--------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
################################################################################
"""
}

# Ensures the file structure is correct
agogo-verify-setup() {
  if [[ !(-e $(agogo-filepath)) ]]; then
    mkdir "$(agogo-filepath)"
  fi

  if [[ !(-e $(agogo-filepath)/workspaces) ]]; then
    mkdir "$(agogo-filepath)/workspaces"
  fi
}

# Create a workspace with the specified name
agogo-create() {
  local ws=$1

  if agogo-workspace-exists $ws; then
    agogo-error "Workspace $ws already exists!"
  fi

  mkdir "$(agogo-filepath)/workspaces/$ws"
  agogo-print "Successfully created workspace '$ws'"
}

# Destroy the workspace with the specified name
agogo-destroy() {
  local ws=$1

  agogo-verify-workspace $ws

  agogo-confirm-prompt "This will permanently destroy workspace $ws and all its tasks. \
    !This cannot be undone!"

  if [[ "$ws" == "$(agogo-current-workspace)" ]]; then 
    agogo-clockoff
  fi
  rm -f "$(agogo-filepath)/workspaces/$ws/*"
  rmdir "$(agogo-filepath)/workspaces/$ws" #just to make it obvious what's a dir and what is not
  agogo-print "Successfully destroyed workspace $ws"
}

# Show the current state of the workspace
agogo-list() {
  agogo-print "------------------------------------------------------------"

  agogo-print "  WORKSPACES: "
  agogo-print "    $(ls "$(agogo-filepath)/workspaces")"

  agogo-print "------------------------------------------------------------"
  if agogo-current-exists; then
    local ws=$(agogo-current-workspace)

    agogo-print "\n  CURRENT WORKSPACE:\n    $ws"
    
    agogo-print "\n  PROJECTS:\n"
    # agogo-print "\t Name \t Tot. mins \t Weight\n"
    local table="    Name\tTime (m)\tWeight\n"
    for file in "$(agogo-filepath)/workspaces/$ws/"*; do
      local fname=$(echo "$file" | sed 's/.*\///')
      local fdata=$(awk 'BEGIN { FS = "\n" ; RS = "" ; OFS = "\t" } { print "  " $1, "  " $2 }' <$file)
      # agogo-print "$fname $fdata"
      local table="$table    $fname\t$fdata\n"
    done
    printf "$table" | column -t -s "$(printf '\t')"
    agogo-print "------------------------------------------------------------"
  fi
}

agogo-clockon() {
  local ws=$1

  agogo-verify-workspace $ws

  echo "WORKSPACE $ws" > $(agogo-filepath)/current
  agogo-print "Successfully clocked on to workspace $ws"
}

agogo-clockoff() {
  agogo-verify-current

  local ws=`agogo-current-workspace`
  rm $(agogo-filepath)/current
  agogo-print "Successfully clocked off workspace $ws"
}

agogo-status() {
  if agogo-current-exists; then
    agogo-print "Currently clocked on to workspace:"
    agogo-print $(agogo-current-workspace)
    agogo-print "Last chosen task was:"
    agogo-print $(agogo-current-task)

  else
    agogo-print "Not clocked on to any workspace"
  fi
}

agogo-add() {
  local pj=$1

  agogo-verify-current

  local ws=$(agogo-current-workspace)
  if agogo-task-exists $ws $pj; then
    agogo-error "Task '$pj' already exists on workspace $ws!"
  fi

  local pth="$(agogo-filepath)/workspaces/$ws/$pj"
  touch $pth
  echo 0 >> $pth # total age
  echo 0 >> $pth # total weighting
  echo 1 >> $pth # importance level
  agogo-print "Successfully created task '$pj' on workspace $ws."
}

agogo-remove() {
  local pj=$1

  agogo-verify-current

  local ws=$(agogo-current-workspace)
  if !(agogo-task-exists $ws $pj); then
    agogo-error "Task '$pj' does not exist on workspace $ws!"
  fi
  
  agogo-confirm-prompt "This will permanently remove task $pj from workspace $ws. This cannot be undone."
  rm -f "$(agogo-filepath)/workspaces/$ws/$pj"
  agogo-print "Successfully removed task $pj from workspace $ws."
}

agogo-move() {
  if (( $# != 2 )); then
    agogo-error "Incorrect number of arguments to move."
  fi

  local pj1=$1
  local pj2=$2

  agogo-verify-current

  local ws=$(agogo-current-workspace)
  if !(agogo-task-exists $ws $pj1); then
    agogo-error "Task '$pj1' does not exist on workspace $ws!"
  fi

  mv "$(agogo-filepath)/workspaces/$ws/$pj1" "$(agogo-filepath)/workspaces/$ws/$pj2" 
  agogo-print "Successfully moved task $pj1 to task $pj2."
}



agogo-log() {
  local t=$(agogo-parse-time "$1")
  local pj=$2

  agogo-verify-current

  local ws=$(agogo-current-workspace)

  agogo-verify-task $ws $pj
  
  local N=$(ls "$(agogo-filepath)/workspaces/$ws" | wc -l )
  local pth="$(agogo-filepath)/workspaces/$ws"

  # Log the time directly in the case that there is only one task
  if [[ $N -eq 1 ]]; then
    awk -v t=$t 'BEGIN { FS = "\n" ; RS = "" ; OFS = "\n" }\
      ($2 > t) { print $1+t,$2-t,$3 }
      ($2 <= t) { print $1+t,0,$3}' <"$pth/$pj" >"$(agogo-filepath)/.tmp"
    cat "$(agogo-filepath)/.tmp" > "$pth/$pj"
    rm "$(agogo-filepath)/.tmp" 
    agogo-print "Successfully logged $t minutes on task $pj."
    exit 0
  fi
  
  # Log the time cleverly if there is more than one task
  for file in "$pth/"*; do
    if [[ "$file" == "$pth/$pj" ]]; then
      awk -v t=$t 'BEGIN { FS = "\n" ; RS = "" ; OFS = "\n" }\
        ($2 > t) { print $1+t,$2-t,$3 }\
        ($2 <= t) { print $1+t,0,$3}' <"$file" >"$(agogo-filepath)/.tmp"
      cat "$(agogo-filepath)/.tmp" > "$file"
      rm "$(agogo-filepath)/.tmp" 
    else
      awk -v t=$t -v N=$N 'BEGIN { FS = "\n" ; RS = "" ; OFS = "\n" }\
        { print $1,$2+(t/(N-1)),$3 }' <"$file" >"$(agogo-filepath)/.tmp"
      cat "$(agogo-filepath)/.tmp" > "$file"
      rm "$(agogo-filepath)/.tmp" 
    fi
  done

  agogo-print "Successfully logged $t minutes on task $pj."
}

agogo-choose() {
  agogo-verify-current

  local ws="$(agogo-current-workspace)"
  local pth="$(agogo-filepath)/workspaces/$ws"
  local N=$(ls "$pth" | wc -l )

  if [[ $N -eq 0 ]]; then
    agogo-error "There are no tasks to choose; workspace $ws is empty."
  fi

  local data=$( echo $pth/* | xargs awk 'BEGIN { FS="\n"; RS="" } { print FILENAME, $2 }')
  local T=$( echo "$data" | awk '{ T+=$2 } END { print T }' )
  if [[ $T -eq 0 ]]; then
    local r=$(agogo-random $N)
    local pj=$(echo "$data" | awk -v r=$r '{if (r < 1) { print $1; exit } else { r-=1 }}' | sed 's/.*\///')
  else
    local r=$(agogo-random $T)
    local pj=$(echo "$data" | awk -v r=$r '{if (r < $2) { print $1; exit } else { r-=$2 }}'| sed 's/.*\///')
  fi
  
  sed -i "/TASK/d" "$(agogo-filepath)/current"
  echo "TASK $pj" >> "$(agogo-filepath)/current"
  agogo-print "Agogo has chosen the following task for you:"
  agogo-print "\t $pj"
}

agogo-set() {
  agogo-verify-current
  
  local pj="${!#}"
  local ws=$(agogo-current-workspace)
  if !(agogo-task-exists $ws $pj); then
    agogo-error "Project '$pj' does not exist on workspace $ws!"
  fi
  
  while [ "$#" -gt 1 ]; do
    case "$1" in
      -n|--name)
        agogo-move $pj $2
        shift 2
        ;;
      *)
        agogo-error "Unknown option $1"
        ;;
    esac
  done

}

main() {
  # Check that all the required files are in place
  agogo-verify-setup

  # We catch some floundering around with args, and certain flags
  if agogo-help-requested "$@"; then
    agogo-help
    exit 0
  fi

  if agogo-info-requested "$@"; then
    agogo-info
    exit 0
  fi

  # Otherwise we check for a proper use case
  local main_command=$1
  shift
  if [[ ($main_command = "clockon") ]]; then
    agogo-clockon "$@"
  elif [[ ($main_command = "clockoff") ]]; then
    agogo-clockoff
  elif [[ ($main_command = "create") ]]; then
    agogo-create "$@"
  elif [[ ($main_command = "destroy") ]]; then
    agogo-destroy "$@"
  elif [[ ($main_command = "list") ]]; then
    agogo-list "$@"
  elif [[ ($main_command = "status") ]]; then
    agogo-status
  elif [[ ($main_command = "add") ]]; then
    agogo-add "$@"
  elif [[ ($main_command = "remove")||($main_command = "rm") ]]; then
    agogo-remove "$@"
  elif [[ ($main_command = "move")||($main_command = "mv") ]]; then
    agogo-move "$@"
  elif [[ ($main_command = "log") ]]; then
    agogo-log "$@"
  elif [[ ($main_command = "choose") ]]; then
    agogo-choose "$@"
  elif [[ ($main_command = "set") ]]; then
    agogo-set "$@"
  else
    # if all else fails, complain
    agogo-print "Not a recognised agogo command. Try 'agogo -h' or 'agogo --help' for a list of commands."
  fi
  agogo-print ""
  exit 0
}

main "$@"

